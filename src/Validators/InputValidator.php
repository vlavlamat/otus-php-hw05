<?php

declare(strict_types=1);

namespace App\Validators;

use InvalidArgumentException;

/**
 * Валидатор входных данных для проверки ограничений
 *
 * Выполняет проверку ограничений на входные данные перед их обработкой.
 * Предназначен для валидации ограничений на размер и количество элементов.
 *
 * Основные функции:
 * - Проверка длины текста
 * - Проверка количества элементов в массиве
 *
 * Все методы выбрасывают исключения при нарушении ограничений для обеспечения
 * fail-fast подхода и четкой обработки ошибок.
 *
 * @package App\Validators
 * @author Vladimir Matkovskii and Claude 4 Sonnet
 * @version 2.0
 */
class InputValidator
{
    /**
     * Максимальная длина входного текста в символах
     *
     * Это ограничение защищает от DoS атак через передачу очень больших
     * строк и обеспечивает разумное использование памяти сервера.
     * 1000 символов достаточно для обработки большинства реальных случаев.
     */
    private const MAX_TEXT_LENGTH = 1000;

    /**
     * Максимальное количество email адресов в одном запросе
     *
     * Ограничение на количество email адресов предотвращает перегрузку
     * сервера при обработке больших пакетов данных. 30 адресов
     * является разумным балансом между функциональностью и производительностью.
     */
    private const MAX_EMAIL_COUNT = 30;

    /**
     * Минимальная длина входного текста в символах
     *
     * Минимальное ограничение для предотвращения пустых запросов
     * и обеспечения валидности входных данных.
     */
    private const MIN_TEXT_LENGTH = 1;

    /**
     * Минимальное количество email адресов в запросе
     *
     * Минимальное ограничение для обеспечения смысла запроса.
     * Пустые массивы не должны обрабатываться.
     */
    private const MIN_EMAIL_COUNT = 1;

    /**
     * Валидирует длину входного текста
     *
     * Проверяет, что длина текста находится в допустимых пределах.
     * Это критически важная проверка для предотвращения DoS атак
     * и обеспечения стабильности сервиса.
     *
     * @param string $text Входной текст для проверки
     * @return void
     * @throws InvalidArgumentException Если текст не соответствует ограничениям
     */
    public function validateTextLength(string $text): void
    {
        // Нормализуем текст для проверки
        $normalizedText = trim($text);
        $textLength = strlen($normalizedText);

        // Проверяем минимальную длину
        if ($textLength < self::MIN_TEXT_LENGTH) {
            throw new InvalidArgumentException(
                "Входной текст не может быть пустым. Минимальная длина: " . self::MIN_TEXT_LENGTH . " символ"
            );
        }

        // Проверяем максимальную длину
        if ($textLength > self::MAX_TEXT_LENGTH) {
            throw new InvalidArgumentException(
                "Входной текст слишком длинный. Максимальная длина: " . self::MAX_TEXT_LENGTH . " символов, " .
                "получено: $textLength символов"
            );
        }
    }

    /**
     * Валидирует количество элементов в массиве
     *
     * Проверяет, что количество элементов в массиве находится в допустимых пределах.
     * Это важно для предотвращения перегрузки сервера при обработке больших
     * массивов данных.
     *
     * @param array $items Массив для проверки
     * @param string $itemType Тип элементов для сообщений об ошибках (например, "email адресов")
     * @return void
     * @throws InvalidArgumentException Если количество элементов не соответствует ограничениям
     */
    public function validateArraySize(array $items, string $itemType = "элементов"): void
    {
        $itemCount = count($items);

        // Проверяем минимальное количество элементов
        if ($itemCount < self::MIN_EMAIL_COUNT) {
            throw new InvalidArgumentException(
                "Массив $itemType не может быть пустым. Минимальное количество: " . self::MIN_EMAIL_COUNT
            );
        }

        // Проверяем максимальное количество элементов
        if ($itemCount > self::MAX_EMAIL_COUNT) {
            throw new InvalidArgumentException(
                "Слишком много $itemType. Максимальное количество: " . self::MAX_EMAIL_COUNT . ", " .
                "получено: $itemCount"
            );
        }
    }
}
