# Upstream блоки - это группы серверов для балансировки нагрузки
upstream backend_upstream {
    # Настройка группы backend серверов
    # Nginx распределяет запросы между этими серверами по алгоритму round-robin (по умолчанию)

    # max_fails=2 - после 2 неудачных попыток сервер помечается как недоступный
    # fail_timeout=20s - сервер остается недоступным 20 секунд, затем Nginx снова пробует его использовать
    # Неудачная попытка = HTTP ошибки 5xx, таймаут или разрыв соединения
    server nginx-backend1:80 max_fails=2 fail_timeout=20s;   # Первый backend сервер на порту 80
    server nginx-backend2:80 max_fails=2 fail_timeout=20s;   # Второй backend сервер на порту 80
    # Используется пассивный мониторинг здоровья (passive health check) - Nginx автоматически
    # определяет состояние серверов на основе результатов обработки запросов

    # keepalive - сколько соединений держать открытыми с каждым upstream сервером
    # Это позволяет существенно снизить нагрузку на TCP стек:
    # - Не нужно постоянно создавать и закрывать соединения
    # - Уменьшает латентность за счет исключения TCP handshake
    # - Снижает количество соединений в TIME_WAIT состоянии
    # - Улучшает использование CPU и уменьшает количество сисетмных вызовов
    # Занчение 32 - хороший баланс (не слишком мало и не слишком много)
    keepalive 32;
}

upstream frontend_upstream {
    # Настройка группы frontend серверов
    # В данном случае только один сервер без параметров отказоустойчивости
    # Для высокой доступности можно добавить дополнительные frontend серверы
    server frontend:80;

    # keepalive для frontend сервера работает аналогично backend
    # Даже с одним сервером это полезно, так как proxy создает много соединений
    # При высокой нагрузке это дает существенный прирост производительности
    # Каждое открытое соединение может быть использовано для нескольких запросов
    keepalive 32;
}

# Основной блок сервера - конфигурация для обслуживания входящих запросов
server {
    listen 80;      # Nginx слушает на 80 порту
    server_name _;  # Принимает запросы с любым доменным именем (wildcard)

    server_tokens off;  # Скрываем версию backend глобально

    # Настройки логирования для балансировщика:
    # access_log - записывает информацию о всех запросах (IP, время, URL, код ответа, и т.д.)
    # Кажжый запрос = одна строка в логе
    # Критически важно для анализа трафика, отладки и мониторинга
    access_log /var/log/nginx/proxy_access.log;

    # error_log - записывает ошибки и предупреждения от самого Nginx
    # Помогает диагностировать проблемы с конфигурацией и работой сервера
    # По умолчанию используется уровень warn (можно указать: debug, info, notice, warn, error, crit)
    error_log /var/log/nginx/proxy_error.log;

    # Таймаут для медленных клиентов
    client_body_timeout 12;     # Таймаут для получения тела запроса
    client_header_timeout 12;   # Таймаут для получения заголовков

    # Основной location блок - обрабатывает все запросы к корню и направляет их на frontend
    location / {
        proxy_pass http://frontend_upstream;
        # Использует HTTP/1.1 для поддержки keepalive соединений
        proxy_http_version 1.1;

        # Необходимо для keepalive с frontend upstreamm
        # Это директива очищает заголовок Connection, позволяя соединениям оставаться открытыми
        # Работает в паре с директивой keepalive в upstream блоке
        proxy_set_header Connection "";

        # Таймауты для фронтенда (обычно больше чем для API)
        proxy_connect_timeout 10s;      # Подключение к frontend
        proxy_send_timeout 60s;         # Отправка запроса
        proxy_read_timeout 60s;         # Ответ от frontend (для больших страниц)

        # Заголовки для фронтенда
        proxy_set_header Host $host;                # Сохраняет оригинальный хост из запроса
        proxy_set_header X-Real-IP $remote_addr;    # Передает реальный IP клиента
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    # Цепочка прокси-серверов

        # Заголовки безопасности - скрывают информацию о технологиях от потенциальных атакующих
        # X-Powered-By обычно расскрывает версию PHP или другого языка/фреймворка
        # Server раскрывает версию и тип веб-сервера (backend, apache)
        # Скрытие этих заголовков - часть стратегии "security through obscurity"
        proxy_hide_header X-Powered-By; # Скрывает информацию о серверных технологиях
        proxy_hide_header Server;       # Скрывает информацию о веб-сервере
    }

    # Проксирование API-запросов к backend серверам
    location /api/ {
        # Все запросы начинающиеся с /api/ идут к backend серверам
        # Trailing slash в proxy_pass удаляет префикс /api/ при проксировании - это соответствует
        # best practices микросервисной архитекуты (чистые URL для микросервисов)
        proxy_pass http://backend_upstream/;
        proxy_http_version 1.1;

        # Важно для работы keepalive соединений с upstream серверами!
        # Пустое значение заголовка Connection означает, что соединение будет оставаться открытым
        # По умолчанию, Nginx добавляет "Connection: close", что закрывает соединение после запроса
        # Данная директива нужна ИМЕННО ПОТОМУ, что настроили keepalive в upstream блоке
        # В HTTP/1.1 соединения по умолчанию остаются открытыми, но Nginx это переопределяет
        proxy_set_header Connection "";

        # Таймауты для взаимодействия с backend
        proxy_connect_timeout 5s;     # Таймаут на установку соединения с backend
        proxy_send_timeout 30s;        # Таймаут на отправку данных в backend
        proxy_read_timeout 30s;        # Таймаут на чтение данных от backend

        # Передача важных заголовков от клиента к backend серверам:
        proxy_set_header Host $host;                                    # Оригинальный Host заголовок
        proxy_set_header X-Real-IP $remote_addr;                        # Реальный IP клиента
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    # Цепочка IP адресов
        proxy_set_header X-Forwarded-Proto $scheme;                     # Протокол (http/https)

        # Заголовки безопасности - скрывают информацию о технологиях от потенциальных атакующих
        # X-Powered-By обычно раскрывает версию PHP или другого языка/фреймворка
        # Server раскрывает версию и тип веб-сервера (nginx, apache)
        # Скрытие этих заголовков - часть стратегии "security through obscurity"
        proxy_hide_header X-Powered-By;  # Скрывает информацию о серверных технологиях
        proxy_hide_header Server;        # Скрывает информацию о веб-сервере
    }

    # Буферизация для больших ответов
    # Буферизация нужна для оптимизации производительности при проксировании запросов
    # Nginx получает ответ от upstream сервера, сохраняет его в буфер и отправляет клиенту

    # proxy_buffers - настройка количества и размера буферов для хранения ответов
    # Формат: proxy_buffers [количество] [размер];
    # 16 16k = 16 буферов по 16 килобайт каждый (всего 256KB на соединение)
    proxy_buffers 16 16k;

    # proxy_buffer_size - размер буфера для заголовков ответа
    # Должен быть достаточным для хранения типичных HTTP заголовков
    # 16k хватает для большинства случаев (даже с cookie и прочими параметрами)
    proxy_buffer_size 16k;
}