<?php

declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';

use App\Redis\Adapters\RedisCacheAdapter;
use App\Validators\TldValidator;

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã TLD –∫—ç—à–∞ –≤ Redis Cluster
 *
 * –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PHP, –∞ –Ω–µ –∏–∑ —Ö–æ—Å—Ç-—Å–∏—Å—Ç–µ–º—ã!
 *
 * –ó–∞–ø—É—Å–∫ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:
 * $ docker exec -it php-fpm1-hw05 php scripts/test_tld_cache.php
 *
 * –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç:
 * 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é TldValidator –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
 * 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email –∞–¥—Ä–µ—Å–æ–≤
 * 3. –ü—Ä–æ–≤–µ—Ä–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—ç—à–µ–º (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
 * 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * 5. –ü—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
 */

echo "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TLD –∫—ç—à–∞ –≤ Redis Cluster\n";
echo "==========================================\n\n";

try {
    echo "üìã –≠–¢–ê–ü 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TldValidator\n";
    echo "------------------------------------\n";

    $startTime = microtime(true);
    $validator = new TldValidator();
    $initTime = (microtime(true) - $startTime) * 1000;

    echo "‚úÖ TldValidator —Å–æ–∑–¥–∞–Ω –∑–∞ {$initTime}ms\n";

    $cacheInfo = $validator->getCacheInfo();
    echo "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ:\n";
    echo "   - –°—Ç–∞—Ç—É—Å: {$cacheInfo['status']}\n";
    echo "   - TTL: {$cacheInfo['ttl_human']} ({$cacheInfo['ttl_seconds']} —Å–µ–∫)\n";
    echo "   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ TLD: {$cacheInfo['current_tlds_count']}\n";

    if ($cacheInfo['metadata']) {
        $metadata = $cacheInfo['metadata'];
        echo "   - –ò—Å—Ç–æ—á–Ω–∏–∫: {$metadata['source']}\n";
        echo "   - –í–µ—Ä—Å–∏—è: {$metadata['version']}\n";
        echo "   - –ó–∞–≥—Ä—É–∂–µ–Ω–æ: " . date('Y-m-d H:i:s', $metadata['loaded_at']) . "\n";
    }

    echo "\n";

    echo "üìã –≠–¢–ê–ü 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email –∞–¥—Ä–µ—Å–æ–≤\n";
    echo "-----------------------------------------------\n";

    $testEmails = [
        'user@example.com',
        'admin@google.com',
        'test@microsoft.net',
        'info@company.org',
        'contact@startup.tech',
        'support@site.online',
        'user@invalid.xyz',
        'test@domain.fake',
        'admin@company.ru',
        'info@startup.de',
    ];

    foreach ($testEmails as $email) {
        $startTime = microtime(true);
        $result = $validator->validate($email);
        $validationTime = (microtime(true) - $startTime) * 1000;

        $status = $result->isValid() ? '‚úÖ' : '‚ùå';
        echo "$status $email - {$validationTime}ms\n";

        if (!$result->isValid()) {
            echo "   –û—à–∏–±–∫–∞: $result->reason\n";
        }
    }

    echo "\n";

    echo "üìã –≠–¢–ê–ü 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—ç—à–µ–º\n";
    echo "----------------------------------------\n";

    echo "üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞:\n";
    $cacheInfo = $validator->getCacheInfo();
    print_r($cacheInfo);

    echo "\nüîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞...\n";
    $refreshStart = microtime(true);
    $refreshSuccess = $validator->forceRefreshCache();
    $refreshTime = (microtime(true) - $refreshStart) * 1000;

    if ($refreshSuccess) {
        echo "‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –∑–∞ {$refreshTime}ms\n";
    } else {
        echo "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞\n";
    }

    echo "\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n";
    $newCacheInfo = $validator->getCacheInfo();
    print_r($newCacheInfo);

    echo "\n";

    echo "üìã –≠–¢–ê–ü 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n";
    echo "------------------------------------------\n";

    $performanceEmails = [
        'user1@example.com',
        'user2@google.com',
        'user3@microsoft.net',
        'user4@company.org',
        'user5@startup.tech'
    ];

    $totalTime = 0;
    $iterations = 100;

    echo "üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ $iterations –∏—Ç–µ—Ä–∞—Ü–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏...\n";

    for ($i = 0; $i < $iterations; $i++) {
        foreach ($performanceEmails as $email) {
            $startTime = microtime(true);
            $validator->validate($email);
            $totalTime += (microtime(true) - $startTime) * 1000;
        }
    }

    $avgTime = $totalTime / ($iterations * count($performanceEmails));
    echo "üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {$avgTime}ms\n";
    echo "üìà –û–±—â–µ–µ –≤—Ä–µ–º—è: " . ($totalTime / 1000) . " —Å–µ–∫\n";

    echo "\n";

    echo "üìã –≠–¢–ê–ü 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏\n";
    echo "-------------------------------------------\n";

    echo "üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback —Ä–µ–∂–∏–º–∞ (–±–µ–∑ Redis)...\n";
    $mockCache = new class extends RedisCacheAdapter {
        private string $keyPrefix;

        public function __construct()
        {
            $this->keyPrefix = 'tld_cache:';
            parent::__construct($this->keyPrefix);
        }

        public function exists(string $key): bool
        {
            return false;
        }

        public function get(string $key): mixed
        {
            return null;
        }

        public function set(string $key, mixed $data, int $ttl): bool
        {
            return false;
        }

        public function getTtl(string $key): int
        {
            return -2;
        }
    };

    $fallbackStart = microtime(true);
    $fallbackValidator = new TldValidator($mockCache);
    $fallbackTime = (microtime(true) - $fallbackStart) * 1000;

    echo "‚úÖ Fallback –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω –∑–∞ {$fallbackTime}ms\n";

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ fallback —Ä–µ–∂–∏–º–µ
    $fallbackResult = $fallbackValidator->validate('user@example.com');
    echo "üìß –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ fallback —Ä–µ–∂–∏–º–µ: " . ($fallbackResult->isValid() ? '‚úÖ' : '‚ùå') . "\n";

    $fallbackCacheInfo = $fallbackValidator->getCacheInfo();
    echo "üìä –°—Ç–∞—Ç—É—Å fallback –∫—ç—à–∞: {$fallbackCacheInfo['status']}\n";

    echo "\n";

    // –≠–¢–ê–ü 6: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞–±–æ—Ç—ã
    echo "üìã –≠–¢–ê–ü 6: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞–±–æ—Ç—ã\n";
    echo "----------------------------------------\n";

    echo "üîÑ –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã TLD –∫—ç—à–∞:\n";
    echo "1Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Redis –∫—ç—à–∞ (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π)\n";
    echo "2Ô∏è‚É£ Fallback –Ω–∞ IANA API (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)\n";
    echo "3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis –∫—ç—à (–¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)\n";
    echo "4Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ –≤—Å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)\n";

    echo "\nüìä –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n";
    echo "   - Redis –∫—ç—à: ~1-5 –º—Å\n";
    echo "   - IANA API: ~500-2000 –º—Å\n";
    echo "   - Fallback: ~0.1 –º—Å\n";

    echo "\nüõ°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:\n";
    echo "   - Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞ —Å IANA ‚Üí fallback\n";
    echo "   - IANA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Üí fallback —Å–ø–∏—Å–æ–∫\n";
    echo "   - –î–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É\n";

    echo "\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n";

} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
    echo "üìç –§–∞–π–ª: " . $e->getFile() . ":" . $e->getLine() . "\n";
    echo "üîç Trace:\n" . $e->getTraceAsString() . "\n";
}